package parser

import (
	"reflect"
	"testing"
)

func TestParser_findLocation(t *testing.T) {
	type args struct {
		s string
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		{
			"",
			args{"lfndvd –∫—É–ª—Ü–∫"},
			"",
		},
		{
			"",
			args{"–∫—É–ª–∞"},
			"",
		},
		{
			"",
			args{"–ï—Å—Ç—å –∂–µ —Ç–∏–∫–µ—Ç –¥–ª—è –ö–∞–∑–∞–∫–æ–≤–∞."},
			"–∫–∞–∑–∞–∫–æ–≤",
		},
		{
			"",
			args{"–ú–∞–∫—Å–∏–º –¢–∞—Ä–∞—Å–æ–≤, [14.06.2023 23:57]\nhttps://ticket.belkacar.ru/ticket/OIIZY8\n—Ç417—Ä—É790\n–ö—É–ª–∞–∫"},
			"–∫—É–ª–∞–∫",
		},
		{
			"",
			args{"–ë–µ–ª—É–≥–∏–Ω –î–µ–Ω–∏—Å, [14.06.2023 23:39]\nhttps://ticket.belkacar.ru/ticket/XPRX06\n—É286–Ω—Å790 –≤ –¶–ö–†"},
			"—Ü–∫—Ä",
		},
		{
			"",
			args{"–°—Ç–∞–Ω–∏—Å–ª–∞–≤ –ö–∞—á—É—Å–æ–≤, [14.06.2023 22:56]\nhttps://ticket.belkacar.ru/ticket/12228657\n–≤972—Ä–Ω799\n–í –∞–≤—Ç–æ—Ä–µ–º–æ–Ω—Ç –ø–ª—é—Å\n–æ–¥–∏–Ω—Ü–æ–≤–æ"},
			"–∞–≤—Ç–æ—Ä–µ–º–æ–Ω—Ç –ø–ª—é—Å",
		},
		{
			"",
			args{"–ë–µ–ª—É–≥–∏–Ω –î–µ–Ω–∏—Å, [14.06.2023 22:49]\nhttps://ticket.belkacar.ru/ticket/FYUWHO\n–º442–µ–∫790 –í –ö–∞–∑–∞–∫–æ–≤"},
			"–∫–∞–∑–∞–∫–æ–≤",
		},
		{
			"",
			args{"–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ß–º–∏—Ä—å, [14.06.2023 22:46]\nhttps://ticket.belkacar.ru/ticket/12229756\n—Ä785–Ω—Å790\n–ù–∞ –ø–µ—Ä–≤—É—é –º–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—É—é\n–Ω–∞–ø—Ä–æ—Ç–∏–≤ —Ç–æ–π–æ—Ç—ã"},
			"–º–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω–∞—è",
		},
		{
			"in url",
			args{"–î–µ–Ω–∏—Å –ö–æ—Ä–æ–±–∫–æ–≤, [14.06.2023 22:38]\nhttps://ticket.belkacar.ru/ticket/1152775\n—Ä467—Ä–º799\n–í –∫–∞–∑–∞–∫–æ–≤"},
			"–∫–∞–∑–∞–∫–æ–≤",
		},
		{
			"",
			args{"–í–∞–ª–µ—Ä–∏—è –ö—Ä–µ—Ç–æ–≤–∞üß∏, [14.06.2023 22:20]\nhttps://ticket.belkacar.ru/ticket/F0CMIL\n–∞366—Å–≤790\n–ù–∞ —à–∏–∫–∞–Ω—É\n–ê—Ä–µ–Ω–¥–∞"},
			"—à–∏–∫–∞–Ω–∞",
		},
		{
			"",
			args{"–†—É—Å–ª–∞–Ω –ó–∞–ª–¥—è, [14.06.2023 22:12]\nhttps://ticket.belkacar.ru/ticket/GCHWBM\n–º363–µ–∫790\n–Ω–∞ —à–∏–∫–∞–Ω—É"},
			"—à–∏–∫–∞–Ω–∞",
		},
		{
			"",
			args{"–î–º–∏—Ç—Ä–∏–π –û–≤—á–∏–Ω–Ω–∏–∫–æ–≤, [14.06.2023 21:55]\nhttps://ticket.belkacar.ru/ticket/GXCWVM\n–∫385–Ω—Ç790\n–í –∫–∞–∑–∞–∫–æ–≤"},
			"–∫–∞–∑–∞–∫–æ–≤",
		},
		{
			"",
			args{"–°–µ—Ä–≥–µ–π –Ø—à–∏–Ω, [14.06.2023 21:44]\nhttps://ticket.belkacar.ru/ticket/QLPP3U\n–≤213–Ω—Ç790\n–ö—É–ª–∞–∫"},
			"–∫—É–ª–∞–∫",
		},
		{
			"",
			args{"–ö–∏—Ä–∏–ª–ª –£—Ä–∞–∫–æ–≤, [14.06.2023 21:39]\nhttps://ticket.belkacar.ru/ticket/6J3GUE\n–∫115–Ω–Ω797\n–í –∫–∞–∑–∞–∫–æ–≤"},
			"–∫–∞–∑–∞–∫–æ–≤",
		},
		{
			"",
			args{"–ê–Ω–¥—Ä–µ–π –í—å—é—Å–æ–≤, [14.06.2023 18:15]\n==========–°–º–µ–Ω–∞ –í—å—é—Å–æ–≤–∞ –ê–Ω–¥—Ä–µ—è========="},
			"",
		},
		{
			"",
			args{"\n–ê–Ω–¥—Ä–µ–π –í—å—é—Å–æ–≤, [14.06.2023 07:42]\n–ß–µ–∫–ª–∏—Å—Ç"},
			"",
		},
		{
			"",
			args{"–ê—Ä—Å–µ–Ω–∏–π –ó–∞–π—Ü–µ–≤, [14.06.2023 07:34]\nhttps://ticket.belkacar.ru/ticket/D7IS7O\n–∫866—Ä–Ω799\n–¢–æ –æ–±—Ä—É—á"},
			"–æ–±—Ä—É—á–µ–≤–∞",
		},
		{
			"",
			args{"–ê–Ω–¥—Ä–µ–π –í—å—é—Å–æ–≤, [14.06.2023 07:17]\n–ß–µ–∫–ª–∏—Å—Ç"},
			"",
		},
		{
			"",
			args{"–í–∏—Ç—Ç–æ—Ä–∏—è –ì—Ä–æ–π—Å, [14.06.2023 07:06]\nhttps://ticket.belkacar.ru/ticket/4NW6GO\n—Ä984–µ–æ790\n–û—Ñ–∏—Å"},
			"–æ—Ñ–∏—Å",
		},
		{
			"",
			args{"–í–∏—Ç—Ç–æ—Ä–∏—è –ì—Ä–æ–π—Å, [14.06.2023 07:06]\nhttps://ticket.belkacar.ru/ticket/4NW6GO\n—Ä984–µ–æ790\n–û—Ñ–∏—Å"},
			"–æ—Ñ–∏—Å",
		},
		{
			"",
			args{"–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ß–º–∏—Ä—å, [14.06.2023 06:46]\nhttps://ticket.belkacar.ru/ticket/12181379\n–∫897–Ω—Ç790\n–ù–∞ —Ü–∫—Ä"},
			"—Ü–∫—Ä",
		},
		{
			"",
			args{"–ö–∏—Ä–∏–ª–ª –£—Ä–∞–∫–æ–≤, [14.06.2023 06:41]\nhttps://ticket.belkacar.ru/ticket/8LWYEC\n—Ä313–º–µ797\n–í –û—Ñ–∏—Å"},
			"–æ—Ñ–∏—Å",
		},
		{
			"",
			args{"–î–º–∏—Ç—Ä–∏–π –û–≤—á–∏–Ω–Ω–∏–∫–æ–≤, [14.06.2023 06:36]\nhttps://ticket.belkacar.ru/ticket/B7PIMX\n—Ä509—Å—Ä799\n–ù–∞ –í–æ–ª–∂—Å–∫–∏–π"},
			"–≤–æ–ª–∂—Å–∫–∏–π",
		},
		{
			"",
			args{"–í–∞–ª–µ—Ä–∏—è –ö—Ä–µ—Ç–æ–≤–∞üß∏, [14.06.2023 06:29]\nhttps://ticket.belkacar.ru/ticket/12226759\n–∞720–º—Ö797\n–ú–æ–π–∫–∞ + –∑–∞–ø—Ä–∞–≤–∏—Ç—å\n–í –æ—Ñ–∏—Å\n–Ø–º–æ–Ω—Ç–æ–≤–æ"},
			"–æ—Ñ–∏—Å",
		},
		{
			"",
			args{"–†—É—Å–ª–∞–Ω –ó–∞–ª–¥—è, [14.06.2023 06:28]\nhttps://ticket.belkacar.ru/ticket/12221868\n—Ç198–≤—Ö790\n–®–∏–∫–∞–Ω–∞"},
			"—à–∏–∫–∞–Ω–∞",
		},
		{
			"",
			args{"+"},
			"",
		},
	}
	p := Init()
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := p.findLocation(tt.args.s); got != tt.want {
				t.Errorf("findLocation() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestParser_findMark(t *testing.T) {
	type args struct {
		s string
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		{
			"",
			args{""},
			"",
		},
		{
			"",
			args{"–£999–£–£177"},
			"—É999—É—É177",
		},
		{
			"",
			args{"–æ000–º—Ö17"},
			"–æ000–º—Ö17",
		},
		{
			"",
			args{"klervelr–£999–£–£177kevekrve4-30543//dw\\"},
			"—É999—É—É177",
		},
		{
			"",
			args{"–ë–µ–ª—É–≥–∏–Ω –î–µ–Ω–∏—Å, [14.06.2023 23:39]\nhttps://ticket.belkacar.ru/ticket/XPRX06\n—É286–Ω—Å790 –≤ –¶–ö–†"},
			"—É286–Ω—Å790",
		},
		{
			"",
			args{"435234"},
			"",
		},
		{
			"",
			args{"–æ000–º—Ö1–≤"},
			"",
		},
		{
			"",
			args{"–æ000–º—Å—Ö17"},
			"",
		},
		{
			"",
			args{"–æ0030—Å—Ö17"},
			"",
		},
		{
			"",
			args{"000—Å—Ö17"},
			"",
		},
	}
	p := Init()
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := p.findMark(tt.args.s); got != tt.want {
				t.Errorf("findMark() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestParser_findMarks(t *testing.T) {
	type args struct {
		s string
	}
	tests := []struct {
		name      string
		args      args
		wantMarks []string
	}{
		{
			"",
			args{""},
			nil,
		},
		{
			"",
			args{"–£999–£–£177"},
			[]string{"—É999—É—É177"},
		},
		{
			"",
			args{"–æ000–º—Ö17"},
			[]string{"–æ000–º—Ö17"},
		},
		{
			"",
			args{"klervelr–£999–£–£177kevekrve4-30543//dw\\"},
			[]string{"—É999—É—É177"},
		},
		{
			"",
			args{"–ë–µ–ª—É–≥–∏–Ω –î–µ–Ω–∏—Å, [14.06.2023 23:39]\nhttps://ticket.belkacar.ru/ticket/XPRX06\n—É286–Ω—Å790 –≤ –¶–ö–†"},
			[]string{"—É286–Ω—Å790"},
		},
		{
			"",
			args{"435234"},
			nil,
		},
		{
			"",
			args{"–æ000–º—Ö1–≤"},
			nil,
		},
		{
			"",
			args{"–æ000–º—Å—Ö17"},
			nil,
		},
		{
			"",
			args{"–æ0030—Å—Ö17"},
			nil,
		},
		{
			"",
			args{"000—Å—Ö17"},
			nil,
		},
		{
			"",
			args{"–ë–µ–ª—É–≥–∏–Ω –î—É286–Ω—Å790–µ–Ω–∏—Å, [14.06.2023 23:39]\nhttps://tick—É286–Ω—Å791et.belkacar.ru/ticket/XPRX06\n—É286–Ω—Å792 –≤ –¶–ö–†"},
			[]string{"—É286–Ω—Å790", "—É286–Ω—Å791", "—É286–Ω—Å792"},
		},
		{
			"",
			args{"–ø—Ä–∏–≥–Ω–∞–ª–∏\n—Å706–Ω—Ö790\n—Ä727–µ–∞790\n—Ö330–Ω—Å790"},
			[]string{"—Å706–Ω—Ö790", "—Ä727–µ–∞790", "—Ö330–Ω—Å790"},
		},
	}
	p := Init()
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotMarks := p.findMarks(tt.args.s); !reflect.DeepEqual(gotMarks, tt.wantMarks) {
				t.Errorf("findMarks() = %v, want %v", gotMarks, tt.wantMarks)
			}
		})
	}
}

func TestParser_findTO(t *testing.T) {
	type args struct {
		s string
	}
	tests := []struct {
		name string
		args args
		want bool
	}{
		{
			"",
			args{";—Ä253–Ω–∫790/Z94C251ABLR117963/Rio X-Line/123¬†374/–ü–ª–∞–Ω–æ–≤–æ–µ –¢–û;"},
			true,
		},
		{
			"",
			args{"–ü–ª–∞–Ω–æ–≤–æ–µ –¢–û"},
			true,
		},
		{
			"",
			args{";—Ä253–Ω–∫790/Z94C251ABLR117963/Rio X-Line/123¬†374/–ü–ª–∞–Ω–æ–≤–æ–µ "},
			false,
		},
		{
			"",
			args{"—Ä–æ–∏–∞–º–æ–ª—É–ª–¥–º"},
			false,
		},
		{
			"",
			args{""},
			false,
		},
	}
	p := Init()
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := p.findTO(tt.args.s); got != tt.want {
				t.Errorf("findTO() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestParser_findURL(t *testing.T) {
	type args struct {
		s string
	}
	tests := []struct {
		name string
		args args
		want bool
	}{
		{
			"",
			args{"–ë–µ–ª—É–≥–∏–Ω –î–µ–Ω–∏—Å, [14.06.2023 23:39]\nhttps://ticket.belkacar.ru/ticket/XPRX06\n—É286–Ω—Å790 –≤ –¶–ö–†"},
			true,
		},
		{
			"",
			args{"https://ticket.belkacar.ru/ticket/XPRX06"},
			true,
		},
		{
			"",
			args{""},
			false,
		},
	}
	p := Init()
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := p.findURL(tt.args.s); got != tt.want {
				t.Errorf("findURL() = %v, want %v", got, tt.want)
			}
		})
	}
}
